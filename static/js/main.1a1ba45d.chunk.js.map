{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GACL,qBAAKC,UAAW,YAAhB,SAECD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNtBQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8BNG,E,kDA/Bb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAaRe,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvD,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJE,E,qDAQnB,WAAqB,IAAD,OAClBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAK/C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAC9B,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAE/D,OACI,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA1BZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1a1ba45d.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className={'card-container'}>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2> { props.monster.name } </h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from \"react\";\nimport './card-list.styles.css'\nimport {Card} from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    console.log(props);\n    return <div className={'card-list'}>\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster}/>\n            ))\n        }\n    </div>;\n}","import React from \"react\";\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input className=\"search\"\n           type=\"search\"\n           placeholder={placeholder}\n           onChange={handleChange}\n    />\n);","import './App.css';\nimport {Component} from \"react/cjs/react.production.min\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ monsters: users }));\n  }\n\n  handleChange = e => this.setState({searchField: e.target.value});\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(\n        monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBox placeholder=\"Search monsters\" handleChange={this.handleChange} />\n          <CardList monsters={filteredMonsters} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}